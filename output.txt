Schema: CREATE TABLE customers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    city TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
CREATE TABLE sqlite_sequence(name,seq)
CREATE TABLE products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price REAL NOT NULL,
    in_stock BOOLEAN DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
CREATE TABLE orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES customers(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
)


NLQ: how many customers do we have
SQL: SELECT
  COUNT(*)
FROM Customers;

NLQ: how many products do we have
SQL: SELECT
  COUNT(id)
FROM products;

NLQ: how many orders do we have so far
SQL: SELECT
  COUNT(*)
FROM Orders;

NLQ: which customers have not ordered anything
SQL: SELECT id, name
FROM customers
WHERE id NOT IN (SELECT customer_id FROM orders);

NLQ: which customers have ordered more than 15 times
SQL: SELECT
  c.name
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
GROUP BY
  c.id
HAVING
  COUNT(o.id) > 15;

NLQ: which customers have never ordered
SQL: SELECT id, name
FROM customers
WHERE id NOT IN (SELECT customer_id FROM orders);

NLQ: list customers with all their orders with product info
SQL: SELECT
  c.name AS customer_name,
  c.email AS customer_email,
  o.id AS order_id,
  p.name AS product_name,
  p.price AS product_price,
  o.quantity AS order_quantity,
  o.order_date
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
JOIN products AS p
  ON o.product_id = p.id;

NLQ: list customers with all their orders with product info, give output sorted on customer name
SQL: SELECT
  c.name AS customer_name,
  c.email,
  o.id AS order_id,
  o.quantity,
  o.order_date,
  p.name AS product_name,
  p.price
FROM Customers AS c
JOIN Orders AS o
  ON c.id = o.customer_id
JOIN Products AS p
  ON o.product_id = p.id
ORDER BY
  c.name;

NLQ: which customers have ordered more than 15 products
SQL: SELECT
  c.name
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
GROUP BY
  c.id
HAVING
  SUM(o.quantity) > 15;

NLQ: which customers have ordered more than 15 product items
SQL: SELECT
  c.name
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
GROUP BY
  c.id
HAVING
  SUM(o.quantity) > 15;

NLQ: which customers have ordered less than 5 times
SQL: SELECT
  c.name
FROM customers AS c
JOIN (
  SELECT
    customer_id,
    COUNT(customer_id) AS order_count
  FROM orders
  GROUP BY
    customer_id
  HAVING
    COUNT(customer_id) < 5
) AS o
  ON c.id = o.customer_id;

NLQ: which customers have ordered more than 5 times during last month
SQL: SELECT
  c.id,
  c.name
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
WHERE
  o.order_date >= date('now', '-1 month')
GROUP BY
  c.id,
  c.name
HAVING
  COUNT(o.id) > 5;

NLQ: which products have no orders
SQL: SELECT
  p.name
FROM products AS p
LEFT JOIN orders AS o
  ON p.id = o.product_id
WHERE
  o.product_id IS NULL;

NLQ: which products have not been ordered
SQL: SELECT name FROM products EXCEPT SELECT T1.name FROM products AS T1 INNER JOIN orders AS T2 ON T1.id = T2.product_id

NLQ: Show me all customers from New York.
SQL: SELECT * FROM Customers WHERE city = "New York"

NLQ: List all products that are currently in stock.
SQL: SELECT * FROM products WHERE in_stock = 1;

NLQ: What is the email address of the customer named John Doe?
SQL: SELECT
  email
FROM Customers
WHERE
  name = 'John Doe';

NLQ: Which customers placed orders in the last 30 days?
SQL: SELECT DISTINCT
  c.name
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
WHERE
  o.order_date >= date('now', '-30 days');

NLQ: Give me a list of products ordered more than 5 times.
SQL: SELECT
  p.name
FROM products AS p
JOIN orders AS o
  ON p.id = o.product_id
GROUP BY
  p.name
HAVING
  SUM(o.quantity) > 5;

NLQ: How many orders did each customer place?
SQL: SELECT
  c.name,
  COUNT(o.id) AS total_orders
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
GROUP BY
  c.id
ORDER BY
  total_orders DESC;

NLQ: Show the total revenue generated from each product.
SQL: SELECT
  p.name,
  SUM(o.quantity * p.price) AS total_revenue
FROM orders AS o
JOIN products AS p
  ON o.product_id = p.id
GROUP BY
  p.name;

NLQ: List all customers who have never placed an order.
SQL: SELECT * FROM Customers EXCEPT SELECT T1.* FROM Customers AS T1 JOIN Orders AS T2 ON T1.id = T2.customer_id

NLQ: What is the most expensive product?
SQL: SELECT name FROM products ORDER BY price DESC LIMIT 1

NLQ: Which product has the highest number of orders?
SQL: SELECT
  p.name
FROM products AS p
JOIN orders AS o
  ON p.id = o.product_id
GROUP BY
  p.id
ORDER BY
  SUM(o.quantity) DESC
LIMIT 1;

NLQ: Find the top 5 cities with the most customers.
SQL: SELECT city FROM customers GROUP BY city ORDER BY count(*) DESC LIMIT 5

NLQ: List customers who signed up in the last 7 days.
SQL: SELECT
  id,
  name,
  email
FROM customers
WHERE
  created_at BETWEEN DATETIME('now', '-7 days') AND DATETIME('now');

NLQ: What is the average price of all products?
SQL: SELECT avg(price) FROM products

NLQ: Show the details of all orders placed today.
SQL: SELECT
  *
FROM Orders
WHERE
  DATE(order_date) = DATE('now');

NLQ: List all products ordered by customer with ID 3.
SQL: SELECT
  p.name
FROM orders AS o
JOIN products AS p
  ON o.product_id = p.id
WHERE
  o.customer_id = 3;

NLQ: What was the total quantity ordered for each product?
SQL: SELECT
  p.name,
  SUM(o.quantity) AS total_quantity
FROM orders AS o
JOIN products AS p
  ON o.product_id = p.id
GROUP BY
  p.name;

NLQ: Get a list of all customers and the total amount they spent.
SQL: SELECT
  c.name,
  SUM(p.price * o.quantity) AS total_spent
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
JOIN products AS p
  ON o.product_id = p.id
GROUP BY
  c.id
ORDER BY
  total_spent DESC;

NLQ: Which customers ordered a product priced above $100?
SQL: SELECT DISTINCT
  c.name
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
JOIN products AS p
  ON o.product_id = p.id
WHERE
  p.price > 100;

NLQ: Show all orders with quantity greater than 10.
SQL: SELECT * FROM orders WHERE quantity > 10;

NLQ: List products that have never been ordered.
SQL: SELECT id, name
FROM products
WHERE id NOT IN (SELECT product_id FROM orders);

NLQ: What are the names of customers who ordered the product “Laptop”?
SQL: SELECT
  c.name
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
JOIN products AS p
  ON o.product_id = p.id
WHERE
  p.name = 'Laptop';

NLQ: Which product is out of stock?
SQL: SELECT name FROM products WHERE in_stock = 0

NLQ: Find all orders for customers in Los Angeles.
SQL: SELECT
  *
FROM orders
WHERE
  customer_id IN (
    SELECT
      id
    FROM customers
    WHERE
      city = 'Los Angeles'
  );

NLQ: How many products were ordered by customer “Alice”?
SQL: SELECT
  SUM(T1.quantity)
FROM orders AS T1
INNER JOIN customers AS T2
  ON T1.customer_id = T2.id
WHERE
  T2.name = 'Alice';

NLQ: Show the order history for customer ID 7.
SQL: SELECT
  *
FROM Orders
WHERE
  customer_id = 7;

NLQ: List all customers and how many different products they ordered.
SQL: SELECT
  c.name,
  COUNT(DISTINCT o.product_id) AS num_products_ordered
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
GROUP BY
  c.id,
  c.name;

NLQ: What is the average order quantity?
SQL: SELECT avg(quantity) FROM orders

NLQ: Show customers who ordered more than 3 different products.
SQL: SELECT
  c.name
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
GROUP BY
  c.id
HAVING
  COUNT(DISTINCT o.product_id) > 3;

NLQ: What products were ordered in March 2025?
SQL: SELECT DISTINCT
  p.name
FROM products AS p
JOIN orders AS o
  ON p.id = o.product_id
WHERE
  STRFTIME('%Y-%m', o.order_date) = '2025-03';

NLQ: How many orders were placed per day?
SQL: SELECT DATE(order_date), COUNT(*) FROM orders GROUP BY DATE(order_date)

NLQ: List the top 3 best-selling products by quantity.
SQL: SELECT
  p.name,
  SUM(o.quantity) AS total_quantity
FROM orders AS o
JOIN products AS p
  ON o.product_id = p.id
GROUP BY
  p.name
ORDER BY
  total_quantity DESC
LIMIT 3;

NLQ: Show customers who ordered at least once and live in Chicago.
SQL: SELECT DISTINCT
  C.name
FROM customers AS C
JOIN orders AS O
  ON C.id = O.customer_id
WHERE
  C.city = 'Chicago';

NLQ: Find the customer who spent the most money.
SQL: SELECT
  c.name
FROM customers AS c
JOIN (
  SELECT
    customer_id,
    SUM(quantity * p.price) AS total_spent
  FROM orders AS o
  JOIN products AS p
    ON o.product_id = p.id
  GROUP BY
    customer_id
  ORDER BY
    total_spent DESC
  LIMIT 1
) AS most_spending_customer
  ON c.id = most_spending_customer.customer_id;

NLQ: List all orders along with customer and product names.
SQL: SELECT
  o.id AS order_id,
  c.name AS customer_name,
  p.name AS product_name,
  o.quantity,
  o.order_date
FROM orders AS o
JOIN customers AS c
  ON o.customer_id = c.id
JOIN products AS p
  ON o.product_id = p.id;

NLQ: What is the total revenue from all orders?
SQL: SELECT
  SUM(o.quantity * p.price) AS total_revenue
FROM orders AS o
JOIN products AS p
  ON o.product_id = p.id;

NLQ: List all products with price less than $20.
SQL: SELECT
  *
FROM products
WHERE
  price < 20;

NLQ: How many customers live in each city?
SQL: SELECT city, count(*) FROM customers GROUP BY city

NLQ: Which customer placed the first order?
SQL: SELECT
  c.name
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
ORDER BY
  o.order_date
LIMIT 1;

NLQ: What is the most recent order for each customer?
SQL: SELECT
  c.name AS customer_name,
  p.name AS product_name,
  o.order_date
FROM orders AS o
JOIN customers AS c
  ON o.customer_id = c.id
JOIN products AS p
  ON o.product_id = p.id
WHERE
  (
    o.customer_id,
    o.order_date
  ) IN (
    SELECT
      customer_id,
      MAX(order_date)
    FROM orders
    GROUP BY
      customer_id
  );

NLQ: Find the total number of customers who ordered “Smartphone”.
SQL: SELECT
  COUNT(DISTINCT T1.customer_id)
FROM orders AS T1
INNER JOIN products AS T2
  ON T1.product_id = T2.id
WHERE
  T2.name = 'Smartphone';

NLQ: List all products and how many times each has been ordered.
SQL: SELECT
  p.name,
  COUNT(o.product_id)
FROM products AS p
JOIN orders AS o
  ON p.id = o.product_id
GROUP BY
  p.name;

NLQ: Show the most popular product in each city.
SQL: WITH CityOrders AS (
  SELECT
    c.city,
    p.name AS product_name,
    SUM(o.quantity) AS total_quantity,
    RANK() OVER (PARTITION BY c.city ORDER BY SUM(o.quantity) DESC) AS rank_num
  FROM orders AS o
  JOIN customers AS c
    ON o.customer_id = c.id
  JOIN products AS p
    ON o.product_id = p.id
  GROUP BY
    c.city,
    p.name
)
SELECT
  city,
  product_name,
  total_quantity
FROM CityOrders
WHERE
  rank_num = 1;

NLQ: Get a list of all orders sorted by order date.
SQL: SELECT
  *
FROM Orders
ORDER BY
  order_date;

NLQ: Find customers who ordered more than once in a single day.
SQL: SELECT DISTINCT
  c.id,
  c.name
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
GROUP BY
  c.id,
  DATE(o.order_date)
HAVING
  COUNT(*) > 1;

NLQ: Show orders where total value (price × quantity) exceeds $500.
SQL: SELECT
  *
FROM Orders AS o
JOIN Products AS p
  ON o.product_id = p.id
WHERE
  o.quantity * p.price > 500;

NLQ: List customers who ordered out-of-stock products.
SQL: SELECT DISTINCT
  c.name
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
JOIN products AS p
  ON o.product_id = p.id
WHERE
  p.in_stock = 0;

NLQ: What was the earliest product added to the database?
SQL: SELECT
  MIN(created_at)
FROM Products;

NLQ: Show all customers who ordered between Jan and Mar 2025.
SQL: SELECT DISTINCT
  c.id,
  c.name,
  c.email,
  c.city,
  c.created_at
FROM customers AS c
JOIN orders AS o
  ON c.id = o.customer_id
WHERE
  o.order_date BETWEEN '2025-01-01' AND '2025-03-31';

NLQ: Find the number of orders placed each month.
SQL: SELECT
  STRFTIME('%Y-%m', order_date) AS order_month,
  COUNT(id) AS order_count
FROM orders
GROUP BY
  order_month
ORDER BY
  order_month;

NLQ: List customers who have not ordered in the past 60 days.
SQL: SELECT DISTINCT
  id,
  name
FROM customers
WHERE
  id NOT IN (
    SELECT
      customer_id
    FROM orders
    WHERE
      order_date >= Date('now', '-60 days')
  );
